services:
  app:
    image: ghcr.io/dyrda1/expense-tracker:0afe55a0047046e17cea1342672d1ab34c317e7c
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__Database: "Host=db;Port=5432;Database=expense_tracker;Username=postgres;Password=postgres"
    networks:
      - et_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        order: start-first
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://app:80/health" ]
      interval: 10s
      retries: 5
      start_period: 10s

  db:
    image: postgres:15.10
    environment:
      POSTGRES_DB: expense_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - et_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
      start_period: 10s
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:stable-alpine3.20-perl
    ports:
      - "80:80"
      - "443:443"
    environment:
      BACKEND_HOST: app
      BACKEND_PORT: 80
    configs:
      - source: nginx_conf_template
        target: /etc/nginx/nginx.conf.template
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - et_network
    command: >
      /bin/sh -c "
      envsubst '$$BACKEND_HOST $$BACKEND_PORT' < /etc/nginx/nginx.conf.template > /etc/nginx/conf.d/default.conf &&
      nginx -g 'daemon off;'"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 10s
      retries: 5
      start_period: 10s

  certbot:
    image: certbot/certbot:v3.2.0
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - et_network
    entrypoint: >
      /bin/sh -c "trap exit TERM;
      while :; do certbot renew --webroot -w /var/www/certbot --quiet;
      sleep 12h & wait $${!}; done"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

configs:
  nginx_conf_template:
    external: true

volumes:
  pgdata:
    external: true
  certbot-etc:
    external: true
  certbot-www:
    external: true

networks:
  et_network:
    external: true